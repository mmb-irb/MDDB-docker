"use strict";(self.webpackChunkmdposit=self.webpackChunkmdposit||[]).push([[9349],{17545:(e,t,n)=>{n.d(t,{A:()=>d});var r=n(65043),s=n(64600),i=n.n(s),o=n(81637),a=n(92954);const c="style_loading__Vdgbc",h="style_show__wIdQ5";var u=n(70579);const l=750,d=e=>{let{wait:t=l}=e;const[n,s]=(0,a.A)(!1);return(0,r.useLayoutEffect)((()=>{const e=setTimeout((()=>{s()}),t);return()=>clearTimeout(e)}),[s,t]),(0,u.jsx)("div",{title:"loading...",className:i()(c,{[h]:n}),children:n&&(0,u.jsx)(o.A,{variant:"indeterminate",color:"primary",size:50,thickness:5})})}},29449:(e,t,n)=>{n.d(t,{I:()=>i,f:()=>s});var r=n(65043);const s=(0,r.createContext)(null),i=(0,r.createContext)(null)},89408:(e,t,n)=>{n.d(t,{A:()=>o});var r=n(65043),s=n(82746);const i=(e,t)=>{switch(t.type){case"INIT":return{...e,loading:!0,file:null,error:null};case"SUCCESS":return{...e,loading:!1,file:t.file};case"ERROR":return{...e,loading:!1,error:t.error};default:throw new Error('"'.concat(t.type,'" is not a valid action'))}},o=(e,t)=>{let{defaultRepresentation:n,ext:o}=t;const[a,c]=(0,r.useReducer)(i,{loading:!!e,file:null,error:null});return(0,r.useEffect)((()=>{if(!e)return void c({type:"SUCCESS"});c({type:"INIT"});let t=!1;return(0,s.autoLoad)(e,{defaultRepresentation:n,ext:o}).then((e=>!t&&c({type:"SUCCESS",file:e}))).catch((e=>!t&&c({type:"ERROR",error:e}))),()=>t=!0}),[e,n,o]),a}},92954:(e,t,n)=>{n.d(t,{A:()=>s});var r=n(65043);const s=e=>{const[t,n]=(0,r.useState)(!!e),s=(0,r.useCallback)((e=>{switch(typeof e){case"function":n(e);break;case"boolean":case"number":case"string":n(Boolean(e));break;default:n((e=>!e))}}),[]);return[t,s]}},66062:(e,t,n)=>{n.d(t,{M:()=>a});var r=n(65043),s=n(58338),i=n(95747),o=n(66496);class a{constructor(e){var t=this;this._apiEndpoints={topology:"/topology",interactions:"/analyses/interactions",references:"/references",fileDescriptors:"/filenotes",populations:"/files/populations.json"},this._apiQuery=function(e){let n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],r=t._apiBaseUrl+t._apiEndpoints[e];n||(r=null),t._apiResponses[e]&&t._apiResponses[e].payload&&(r=null);const i=(0,s.A)(r);return null!==r&&(t._apiResponses[e]=i),t._apiResponses[e]},Object.entries(e).forEach((e=>{let[t,n]=e;this[t]=n})),this.metadata.mdFrames||(this.metadata.mdFrames=this.metadata.SNAPSHOTS),this.metadata.timeLength=this.metadata.FRAMESTEP&&this.metadata.mdFrames&&this.metadata.FRAMESTEP*this.metadata.mdFrames||null,this.mdCount=this.mds?this.mds.filter((e=>"(removed)"!==e.slice(-9))).length:0;const n=this.accession||this.identifier;this.accessionAndMdNumber=this.mds?"".concat(n,".").concat(this.mdNumber):n,this.hasInteractions=Boolean(this.metadata.INTERACTIONS&&this.metadata.INTERACTIONS.length>0),this.isPopulated=Boolean(this.files&&this.files.find((e=>"populations.json"===e))),this._apiResponses={topology:null,interactions:null,references:null,fileDescriptors:null,populations:null},this._topologyManager=null,this._apiBaseUrl="".concat(i.nP,"/").concat(this.accessionAndMdNumber)}get interactions(){const e=this._apiQuery("interactions",this.hasInteractions);if(!e)return null;if(e.loading)return null;if(e.error)throw new Error("Error when downloading project interactions: "+e.error.message);if(!e.payload)throw new Error("Something went wrong with project interactions");return e.payload}get references(){const e=this._apiQuery("references");if(e.loading)return null;if(e.error)throw new Error("Error when downloading project references: "+e.error.message);if(!e.payload)throw new Error("Something went wrong with project references");return e.payload}get proteinReferences(){const e=this.references;return(0,r.useMemo)((()=>e&&e.filter((e=>e.uniprot))),[e])}get ligandReferences(){const e=this.references;return(0,r.useMemo)((()=>e&&e.filter((e=>e.pubchem))),[e])}get topology(){const e=this.references,t=this._apiQuery("topology");if(t.loading)return null;if(t.error)throw new Error("Error when downloading project topology: "+t.error.message);if(!t.payload)throw new Error("Something went wrong with project topology");return this._topologyManager||(this._topologyManager=new o.ch(t.payload,this.metadata,e)),this._topologyManager}get fileDescriptors(){return this._apiQuery("fileDescriptors")}get populations(){return this._apiQuery("populations",this.isPopulated)}}},66496:(e,t,n)=>{n.d(t,{ch:()=>m,hR:()=>o,kn:()=>c,w1:()=>h});var r=n(48044);const s=n(82746),i=/^([0-9]*)-([0-9]*)$/,o=e=>{const t=e.split(", "),n=[];for(const s of t)if(s.match(i)){const e=i.exec(s),t=(0,r.A)(+e[1],+e[2]+1);n.push(...t)}else n.push(+s);return n},a={ALA:"A",ALAN:"A",ALAC:"A",ARG:"R",ARGN:"R",ARGC:"R",ASN:"N",ASNN:"N",ASNC:"N",ASP:"D",ASPN:"D",ASPC:"D",CYS:"C",CYSN:"C",CYSC:"C",CYH:"C",CSH:"C",CSS:"C",CYX:"C",CYP:"C",GLN:"Q",GLNN:"Q",GLNC:"Q",GLU:"E",GLUN:"E",GLUC:"E",GLY:"G",GLYN:"G",GLYC:"G",HIS:"H",HISN:"H",HISC:"H",HID:"H",HIE:"H",HIP:"H",HSD:"H",HSE:"H",ILE:"I",ILEN:"I",ILEC:"I",ILU:"I",LEU:"L",LEUN:"L",LEUC:"L",LYS:"K",LYSN:"K",LYSC:"K",MET:"M",METN:"M",METC:"M",PHE:"F",PHEN:"F",PHEC:"F",PRO:"P",PRON:"P",PROC:"P","PR\xd8":"P",PR0:"P",PRZ:"P",SER:"S",SERN:"S",SERC:"S",THR:"T",THRN:"T",THRC:"R",TRP:"W",TRPN:"W",TRPC:"W",TRY:"W",TYR:"Y",TYRN:"Y",TYRC:"Y",VAL:"V",VALN:"V",VALC:"V",A:"A",A3:"A",A5:"A",C:"C",C3:"C",C5:"C",T:"T",T3:"T",T5:"T",G:"G",G3:"G",G5:"G",U:"U",U3:"U",U5:"U",DA:"A",DT:"T",DC:"C",DG:"G"},c=function(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2?arguments[2]:void 0;const r=[],i=new s.Selection(e),o=n.getView(i);return t?o.eachResidue((e=>{var t;((t=e).isProtein()||t.isRna()||t.isDna())&&r.push(e.index)})):o.eachResidue((e=>{r.push(e.index)})),r},h=(e,t)=>{const n=new s.Selection(e);return 0!==t.getView(n).atomCount},u={H:"white",C:"grey",N:"blue",O:"red",S:"yellow",P:"orange"};class l{constructor(e,t){this.topology=e,this.index=t}get number(){return this.topology.residueNumbers[this.index]}get chainIndex(){return this.topology.residueChainIndices[this.index]}get chainName(){return this.topology.chainNames[this.chainIndex]}get chain(){return this.topology.getChainByIndex(this.chainIndex)}get icode(){return this.topology.residueIcodes?this.topology.residueIcodes[this.index]:null}get nglSelection(){let e=":".concat(this.chainName," and ").concat(this.number);return this.icode&&(e+=" ^".concat(this.icode)),e}get type(){return this.topology.residueNames[this.index]}get name(){return this.type}get letter(){return(e=>{if(!e)return;return a[e]||"X"})(this.type)}get referenceIndex(){return this.topology.residueReferenceIndices?this.topology.residueReferenceIndices[this.index]:null}get referenceId(){const e=this.referenceIndex;return null===e?null:this.topology.references[e]}get referenceType(){const e=this.referenceIndex;return null===e?null:this.topology.referenceTypes[e]}get referenceNumber(){return this.topology.residueReferenceNumbers?this.topology.residueReferenceNumbers[this.index]:null}get isProtein(){return"protein"===this.referenceType}get isLigand(){return"ligand"===this.referenceType}get referenceData(){if(null===this.referenceId)return null;if(this.isProtein){const e=this.topology.proteinReferences.find((e=>e.uniprot===this.referenceId));if(!e)throw new Error("Reference id ".concat(this.referenceId," is not found among protein references"));return e}if(this.isLigand){const e=this.topology.ligandReferences.find((e=>e.pubchem===this.referenceId));if(!e)throw new Error("Reference id ".concat(this.referenceId," is not found among ligand references"));return e}throw new Error("Not supported reference type ".concat(this.referenceType))}get referenceName(){const e=this.topology.metadataLigandNames&&this.topology.metadataLigandNames[this.referenceId];if(e)return e;const t=this.referenceData;return t?t.name:null}get isPbc(){return this.topology.pbcResidues.has(this.index)}get standardLabel(){let e="";this.topology.chainNames.length>1&&(e="".concat(this.chainName,":"));const t=this.referenceNumber;let n;n=null!==t?"".concat(t):"".concat(this.number,"*");let r=this.icode;r||(r="");return e+n+r+"(".concat(this.type,")")}get atomIndices(){return this.topology.residueAtomIndices[this.index]}get atomCount(){return this.atomIndices.length}get hasCAlpha(){for(const e of this.atomIndices){if("CA"===this.topology.getAtomName(e))return!0}return!1}}class d{constructor(e,t){this.topology=e,this.index=t}get name(){return this.topology.chainNames[this.index]}get letter(){return this.name}get metadataChainName(){const e=this.topology.metadataChainNames;return e?Array.isArray(e)?e[this.index]||"":e[this.name]||"":""}get residueIndices(){return this.topology.chainResidueIndices[this.index]}get residueNumbers(){return this.topology.chainResidueNumbers[this.index]}get residues(){return this.residueIndices.map((e=>new l(e)))}}class m{constructor(e,t,n){var r=this;this.getAtomName=e=>this.atomNames[e],this.getAtomResidueIndex=e=>this.atomResidueIndices[e],this.getResidueByIndex=e=>{const t=this.residueNumbers.length;if(e>=t)throw new Error("The residue index ".concat(e," is out of range. There are ").concat(t," residues in the topology"));return new l(this,e)},this.getResidueByParameters=function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;const s=r.getChainByName(e);for(const i of s.residueIndices){const e=new l(r,i);if(e.number===t&&e.icode===n)return e}throw new Error("Residue with chain ".concat(e,", number ").concat(t," and icode ").concat(n," does not exist"))},this.getChainByIndex=e=>{const t=this.chainNames.length;if(e>=t)throw new Error("The chain index ".concat(e," is out of range. There are ").concat(t," chains in the topology"));return new d(this,e)},this.getChainByName=e=>{const t=this.chainNames.indexOf(e);if(-1===t)throw new Error("Chain ".concat(e," is not found in the topology"));return new d(this,t)},this.getReferenceResidueIndices=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;if(!r.references)return;const n=r.references.indexOf(e);if(-1===n)return;const s=[];return r.residueReferenceIndices.forEach(((e,i)=>{if(e!==n)return;if(null===t)return s.push(i);const o=r.residueReferenceNumbers[i];t.includes(o)&&s.push(i)})),s},this.residueIndices2Ngl=e=>{const t=[];let n=!1;const r=e.map((e=>this.getResidueByIndex(e)));r.map((e=>e.chainName)).filter(((e,t,n)=>n.indexOf(e)===t)).forEach((e=>{const s=r.filter((t=>t.chainName===e)).map((e=>e.number)),{rangedSelection:i,small:o}=function(e){const t=arguments.length>1&&void 0!==arguments[1]&&!arguments[1]?",":", ";let n="",r=Number.POSITIVE_INFINITY;e.sort(((e,t)=>e-t));const s=e.length;if(1===s)return{rangedSelection:e[0].toString(),small:!0};for(let o=0;o<s;o++){const i=e[o];n+=t+i;for(let t=o+1;t<s;t++){const a=e[t];let c=t-o;if(a-i!==c){c-=1,r=Math.min(c,r),c>1&&(n+="-"+e[t-1],o=t-1);break}t===s-1&&(r=Math.min(c,r),c>1&&(n+="-"+a,o=t))}}const i=r<=3;return n=n.substring(t.length),{rangedSelection:n,small:i}}(s);t.push("(:".concat(e," and (").concat(i,"))")),o&&(n=!0)}));return{rangedSelection:t.join(" or "),small:n}},this.byChains=e=>{const t={};return e.forEach((e=>{const n=this.getResidueByIndex(e).chainName,r=t[n];r?r.push(e):t[n]=[e]})),t},this.getAtomElementColor=e=>{const t=this.atomElements[e],n=u[t];return n||"black"},this.getAtomElementColors=()=>this.atomElements.map((e=>{const t=u[e];return t||"black"})),this.atomNames=e.atom_names,this.atomElements=e.atom_elements,this.atomCharges=e.atom_charges,this.atomResidueIndices=e.atom_residue_indices,this.residueNames=e.residue_names,this.residueNumbers=e.residue_numbers;const s=e.residue_icodes;s?(this.residueIcodes=Array(this.residueNames.length).fill(""),Object.entries(s).forEach((e=>{let[t,n]=e;this.residueIcodes[+t]=n}))):this.residueIcodes="",this.residueChainIndices=e.residue_chain_indices,this.chainNames=e.chain_names,this.references=e.references,this.referenceTypes=e.reference_types,!this.referenceTypes&&this.references&&(this.referenceTypes=this.references.map((e=>"protein"))),this.residueReferenceIndices=e.residue_reference_indices,this.residueReferenceNumbers=e.residue_reference_numbers,this.pbcResidues=e.pbc_residues&&new Set(e.pbc_residues),this.residueAtomIndices=Array.from(Array(this.residueNames.length),(()=>[]));for(const[i,o]of this.atomResidueIndices.entries())this.residueAtomIndices[o].push(i);this.chainResidueIndices=Array.from(Array(this.chainNames.length),(()=>[]));for(const[i,o]of this.residueChainIndices.entries())this.chainResidueIndices[o].push(i);this.chainResidueNumbers=this.chainResidueIndices.map((e=>e.map((e=>this.residueNumbers[e])))),this.metadataChainNames=t.CHAINNAMES,this.metadataLigandNames=t.LIGANDNAMES,this.proteinReferences=n&&n.filter((e=>e.uniprot)),this.ligandReferences=n&&n.filter((e=>e.pubchem))}get residueCount(){return this.residueNumbers.length}}}}]);
//# sourceMappingURL=9349.aefaf0e5.chunk.js.map