{"version":3,"file":"static/js/mutations.90210906.chunk.js","mappings":"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","sources":["components/ngl-viewer/use-mutations-representations/index.js","webpack://mdposit/./src/pages/accession/mutations/style.module.css?b27c","pages/accession/mutations/index.js","webpack://mdposit/./src/pages/accession/populations/style.module.css?57ea","pages/accession/populations/index.js","utils/document-measurer/index.js"],"sourcesContent":["import { useContext, useMemo } from 'react';\n\nimport { ColormakerRegistry } from 'ngl';\n\nimport { color as d3color, scaleLinear } from 'd3';\n\nimport { ProjectCtx } from '../../../contexts';\n\n// Set the color of each residue in the NGL representation\n// WARNING: Grey looks better than white because the background may be white and resdiues are hard to see\nconst greyColorPlan = ['grey', 'yellow', 'red'];\n\n// Use this hook to get the memoized NGL default representations\nconst useMutationsRepresentations = () => {\n  // Get project data\n  const { topology: topologyManager } = useContext(ProjectCtx);\n\n  // Set the representations for the NGL viewer\n  const mutationRepresentations = useMemo(() => {\n    if (!topologyManager) return;\n    // Check that at least 1 of the references has entropies\n    const anyReferenceMutations = topologyManager.proteinReferences.some(\n      reference => !!reference.entropies,\n    );\n    if (!anyReferenceMutations) return;\n\n    // Get the entorpies of each reference\n    // Save the logarithmic values on each reference\n    const entropiesPerReference = topologyManager.proteinReferences.map(reference => {\n      if (!reference.entropies) return [];\n      const logarithmicEntropies = reference.entropies.map(entropy =>\n        Math.log(entropy + 0.0001),\n      );\n      reference.logarithmicEntropies = logarithmicEntropies;\n      return logarithmicEntropies;\n    });\n\n    // Save all array values together just to check the minimum and maximum values\n    const allEntropies = [].concat.apply([], entropiesPerReference);\n    const max = Math.max(...allEntropies);\n    const min = Math.min(...allEntropies);\n\n    // Set the color scale according to the maximum and minimum means\n    const colorScale = scaleLinear()\n      .range(greyColorPlan)\n      .domain([min, (min + max) / 2, max]);\n\n    const colorScheme = ColormakerRegistry.addScheme(function(params) {\n      this.atomColor = atom => {\n        // Find the residue index and then the entropy for this residue\n        // WARNING: atom.residueIndex starts the count at 0 although it may seem that starts at 1\n        // WARNING: It may happen that the first residue is a capping terminal and it is skipped\n        // WARNING: The cartoon representation would skip the non-standard residue and start by 1\n        const residueIndex = atom.residueIndex;\n        const residue = topologyManager.getResidueByIndex(residueIndex);\n        const referenceId = residue.referenceId;\n        // If no reference residue was found then paint it white\n        if (!referenceId) return parseInt('ffffff', 16);\n        // get the corresponding entropy\n        // -1 because the residue 'x' would be the index 'x-1' in the array\n        const reference = residue.referenceData;\n        const entropies = reference.logarithmicEntropies;\n        if (!entropies || entropies.length === 0) return parseInt('ffffff', 16);\n        const entropy = entropies[residue.referenceNumber - 1];\n        // If there is no entropy at this point probably there is something wrong with the map\n        if (!entropy) return parseInt('ffffff', 16);\n        // Calculate the interpolated rgb for this value\n        // The interpolated color comes in rbg format\n        const hexColor = d3color(colorScale(entropy)).formatHex();\n        // The color interpolation returns a string like '#000000'\n        // We remove the first character ('#') and parse it to integer from hexadecimal\n        const color = parseInt(hexColor.substring(1), 16);\n        return color;\n      };\n    });\n\n    const reps = [\n      { name: 'Mutations', color: 'custom', customScheme: colorScheme },\n    ];\n    return reps;\n  }, [topologyManager]);\n\n  return mutationRepresentations;\n};\n\nexport default useMutationsRepresentations;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"style_container__eJ9YA\",\"nglcard\":\"style_nglcard__lM3g-\",\"selector\":\"style_selector__WXY0g\"};","import React, {\n  Suspense,\n  useContext,\n  useMemo,\n  useState,\n  useCallback,\n} from 'react';\n// A hook to track whenever some element is on screen\nimport { useInView } from 'react-intersection-observer';\n\nimport Card from '../../../components/animated-card';\n/*\nimport {\n  CardContent,\n} from '@mui/material';\n*/\nimport ViewerWithControls from '../../../components/viewer-with-controls';\nimport useMutationsRepresentations from '../../../components/ngl-viewer/use-mutations-representations';\n\nimport style from './style.module.css';\n\nimport Loading from '../../../components/loading';\n\nimport { ProjectCtx } from '../../../contexts';\n\nimport ResidueSelector from '../../../components/residue-selector';\n\n// Define permanent options for the \"useInView\"\nconst useInViewOptions = { triggerOnce: true, rootMargin: '100px' };\n\nconst Mutations = () => {\n  // Track if the NGL viewer\n  // The status isNglVisible is returned true/false when the element is in/out the screen respectively\n  const [nglRef, isNglVisible] = useInView(useInViewOptions);\n\n  // Get the current project data\n  const { topology: topologyManager } = useContext(ProjectCtx);\n\n  const residueEntropies = useMemo(() => {\n    if (!topologyManager) return;\n    // Iterate over all residues in the topology to find their corresponding entropy\n    const residuesCount = topologyManager.residueCount;\n    const residueEntropies = new Array(residuesCount).fill(null);\n    // Iterate over all residues in the topology to find their corresponding entropy\n    for (let i = 0; i < residuesCount; i++) {\n      const residue = topologyManager.getResidueByIndex(i);\n      const referenceId = residue.referenceId;\n      if (!referenceId) continue;\n      // We substract 1 from the residue index since it counts from 1 to n as references do\n      const residueReferenceIndex = residue.referenceNumber - 1;\n      const currentproteinReference = residue.referenceData;\n      const entropies = currentproteinReference.entropies;\n      if (!entropies) continue;\n      const entropy = entropies[residueReferenceIndex];\n      if (entropy === undefined) continue;\n      const logarithmicEntropy =\n        Math.round(Math.log(entropy + 0.0001) * 1000) / 1000;\n      residueEntropies[i] = logarithmicEntropy;\n    }\n    return residueEntropies;\n  }, [topologyManager]);\n\n  // Set when one point in the graph is selected\n  const [selectedResidues, setSelectedResidues] = useState([]);\n  // Get the selected residue indices\n  const selectedResidueIndices = selectedResidues.map(\n    residue => +residue.index,\n  );\n\n  // Set the representations for the NGL viewer\n  const representations = useMutationsRepresentations();\n\n  // When a residue is selected\n  const handleSelect = useCallback(\n    (residue, residueIndex, color) => {\n      const selectedResidue = { color, index: residueIndex };\n      setSelectedResidues(previous => [...previous, selectedResidue]);\n    },\n    [setSelectedResidues],\n  );\n  // When a residue is deselected\n  const handleDeselect = useCallback(\n    (residue, residueIndex) => {\n      setSelectedResidues(previous =>\n        previous.filter(residue => residue.index !== residueIndex),\n      );\n    },\n    [setSelectedResidues],\n  );\n  // When the clean all residues button is clicked\n  const handleClean = useCallback(() => {\n    setSelectedResidues([]);\n  }, [setSelectedResidues]);\n\n  // Handle what to write on the tooltip when the user hovers a specific residue letter\n  const handleTooltip = useCallback(residue => {\n    const value = Math.round(residue.value * 100) / 100;\n    return `Logarithmic entropy: ${value}`;\n  }, []);\n\n  if (!representations || !residueEntropies) return <Loading />;\n\n  return (\n    <Suspense fallback={<Loading />}>\n      <Card className={style.nglcard} ref={nglRef}>\n        {/* Render the NGL viewer when it is on screen*/}\n        {isNglVisible ? (\n          <ViewerWithControls\n            className={style.container}\n            startingRepresentations={representations}\n            selectedResidueIndices={selectedResidueIndices}\n          />\n        ) : (\n          <div style={{ height: '50vh' }} />\n        )}\n      </Card>\n      <Card>\n        <ResidueSelector\n          residueValues={residueEntropies}\n          legendTitle={'Logarithmic entropy'}\n          onSelect={handleSelect}\n          onDeselect={handleDeselect}\n          onClean={handleClean}\n          onTooltip={handleTooltip}\n          className={style.selector}\n        />\n      </Card>\n    </Suspense>\n  );\n};\n\nexport default Mutations;\n","// extracted by mini-css-extract-plugin\nexport default {\"paper\":\"style_paper__-IPRl\",\"tablecard\":\"style_tablecard__36QJ9\",\"nglcard\":\"style_nglcard__UaXJ8\",\"container\":\"style_container__4ECe+\",\"selectedrow\":\"style_selectedrow__yv8kY\",\"row\":\"style_row__fdlru\"};","import React, { useContext, useState, useRef, useMemo } from 'react';\n// A hook to track whenever some element is on screen\nimport { useInView } from 'react-intersection-observer';\n\nimport {\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n} from '@mui/material';\n\nimport Card from '../../../components/animated-card';\nimport ViewerWithControls from '../../../components/viewer-with-controls';\n\nimport style from './style.module.css';\n\nimport { ProjectCtx, PdbCtx } from '../../../contexts';\n\nimport Loading from '../../../components/loading';\n\n// Define permanent options for the \"useInView\"\nconst useInViewOptions = { triggerOnce: true, rootMargin: '100px' };\n\n// Set the meaningless populations cutoff\nconst populationsCutoff = 0.001;\n\n// Set a function to calculate the average value from a values array\nconst roundedPercent = value => {\n  const percent = value * 100;\n  const rounded = Math.round(percent * 100) / 100;\n  const label = rounded.toString().padEnd(4, '0');\n  return label;\n};\n\nconst Populations = () => {\n  // Track if the NGL viewer\n  // The status isNglVisible is returned true/false when the element is in/out the screen respectively\n  const [nglRef, isNglVisible] = useInView(useInViewOptions);\n\n  // Get the current project metadata\n  const { metadata, populations } = useContext(ProjectCtx);\n  // Get the current topology, including the residue names\n  const pdbData = useContext(PdbCtx);\n\n  // Set a ref to the ngl which allows access to the ngl viewer exposed methods\n  const viewerRef = useRef(null);\n\n  // Set when one point in the graph is selected\n  const [selectedFrame, setSelectedFrame] = useState(0);\n\n  // Send a request to the API with the url of the rgyr analysis\n  const { loading, payload, error } = populations;\n\n  // Set an array of objects, where each object includes the population value and the frame it belongs to\n  // Populations are sorted so the biggest populations are first and there is a cutoff to exclude meaningless populations\n  const sortedPopulations = useMemo(() => {\n    if (!payload) return;\n    const formatedPopulations = [];\n    payload.forEach((population, i) => {\n      if (population < populationsCutoff) return;\n      formatedPopulations.push({\n        pop: population,\n        frame: i,\n      });\n    });\n    formatedPopulations.sort((a, b) => {\n      return a.pop < b.pop ? 1 : a.pop > b.pop ? -1 : 0;\n    });\n    return formatedPopulations;\n  }, [payload]);\n\n  // Render loading or error messages according with the API response\n  if (loading) return <Loading />;\n  else if (error) return error.toString();\n  else if (!payload) return 'Something bad happened';\n\n  if (!metadata || !pdbData.file) return <Loading />;\n\n  return (\n    <>\n      <Card className={style.tablecard}>\n        <div className={style.paper}>\n          <Table stickyHeader size=\"small\">\n            <TableHead>\n              <TableRow>\n                <TableCell key={0}>{'Population (%)'}</TableCell>\n                <TableCell key={1}>{'Frame'}</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {sortedPopulations.map((population, i) => {\n                const frame = population.frame;\n                return (\n                  <TableRow\n                    key={i}\n                    // Hover only when it is not already selected\n                    hover={frame !== selectedFrame}\n                    className={\n                      frame === selectedFrame ? style.selectedrow : style.row\n                    }\n                    onClick={() => setSelectedFrame(frame)}\n                  >\n                    <TableCell key={0}>\n                      {roundedPercent(population.pop)}\n                    </TableCell>\n                    <TableCell key={1}>{frame}</TableCell>\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </div>\n      </Card>\n      <Card className={style.nglcard} ref={nglRef}>\n        {/* Render the NGL viewer when it is on screen*/}\n        {isNglVisible ? (\n          <ViewerWithControls\n            className={style.container}\n            requestedFrame={selectedFrame}\n            ref={viewerRef}\n          />\n        ) : (\n          <div style={{ height: '50vh' }} />\n        )}\n      </Card>\n    </>\n  );\n};\n\nexport default Populations;\n","// Function involved in getting text pixels width\n// WARNING: These functions do not work properly in Chrome (not an easy problem)\n\n// This function allows to calculate the width of a given string text\n// The font for the calculation in the d3 default font\nexport const getTextWidth = (text, font = 'bold 10px sans-serif') => {\n  const canvas =\n    getTextWidth.canvas ||\n    (getTextWidth.canvas = document.createElement('canvas'));\n  const context = canvas.getContext('2d');\n  context.font = font;\n  const metrics = context.measureText(text);\n  return metrics.width;\n};\n\n// Alternative way to obtain text width\n// Probably the only way to obtain text height\nexport const getTextSizeDOM = (text, font = 'bold 10px sans-serif') => {\n  const element = document.createElement('div');\n  const content = document.createTextNode(text);\n  element.appendChild(content);\n  Object.assign(element.style, {\n    font: font,\n    position: 'absolute',\n    visibility: 'hidden',\n    height: 'auto',\n    width: 'auto',\n    'white-space': 'nowrap',\n  });\n  document.body.appendChild(element);\n  return { width: element.clientWidth, height: element.clientHeight };\n};\n\n// Get the whole body width\nexport const getBodyWidth = () => {\n  return Math.max(\n    document.body.scrollWidth,\n    document.documentElement.scrollWidth,\n    document.body.offsetWidth,\n    document.documentElement.offsetWidth,\n    document.documentElement.clientWidth,\n  );\n};\n\n// Get the whole body height\nexport const getBodyHeight = () => {\n  return Math.max(\n    document.body.scrollHeight,\n    document.documentElement.scrollHeight,\n    document.body.offsetHeight,\n    document.documentElement.offsetHeight,\n    document.documentElement.clientHeight,\n  );\n};\n"],"names":["greyColorPlan","useMutationsRepresentations","topology","topologyManager","useContext","ProjectCtx","useMemo","proteinReferences","some","reference","entropies","entropiesPerReference","map","logarithmicEntropies","entropy","Math","log","allEntropies","concat","apply","max","min","colorScale","scaleLinear","range","domain","name","color","customScheme","ColormakerRegistry","addScheme","params","this","atomColor","atom","residueIndex","residue","getResidueByIndex","referenceId","parseInt","referenceData","length","referenceNumber","hexColor","d3color","formatHex","substring","useInViewOptions","triggerOnce","rootMargin","Mutations","nglRef","isNglVisible","useInView","residueEntropies","residuesCount","residueCount","Array","fill","i","residueReferenceIndex","undefined","logarithmicEntropy","round","selectedResidues","setSelectedResidues","useState","selectedResidueIndices","index","representations","handleSelect","useCallback","selectedResidue","previous","handleDeselect","filter","handleClean","handleTooltip","value","_jsxs","Suspense","fallback","_jsx","Loading","children","Card","className","style","ref","ViewerWithControls","startingRepresentations","height","ResidueSelector","residueValues","legendTitle","onSelect","onDeselect","onClean","onTooltip","roundedPercent","percent","toString","padEnd","Populations","metadata","populations","pdbData","PdbCtx","viewerRef","useRef","selectedFrame","setSelectedFrame","loading","payload","error","sortedPopulations","formatedPopulations","forEach","population","push","pop","frame","sort","a","b","file","_Fragment","Table","stickyHeader","size","TableHead","TableRow","TableCell","TableBody","hover","onClick","requestedFrame","getTextWidth","text","font","arguments","context","canvas","document","createElement","getContext","measureText","width","getTextSizeDOM","element","content","createTextNode","appendChild","Object","assign","position","visibility","body","clientWidth","clientHeight"],"sourceRoot":""}