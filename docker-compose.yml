services:
  apache:
    image: apache_image   # name of apache image
    build:
      context: ./apache   # folder to search Dockerfile for this image
      args:
        APACHE_HTTP_INNER_PORT: ${APACHE_HTTP_INNER_PORT}
        APACHE_HTTPS_INNER_PORT: ${APACHE_HTTPS_INNER_PORT}
        APACHE_HTTP_OUTER_PORT: ${APACHE_HTTP_OUTER_PORT}
        APACHE_HTTPS_OUTER_PORT: ${APACHE_HTTPS_OUTER_PORT}
        APACHE_MINIO_OUTER_PORT: ${APACHE_MINIO_OUTER_PORT}
        APACHE_MINIO_INNER_PORT: ${APACHE_MINIO_INNER_PORT}
        CLIENT_INNER_PORT: ${CLIENT_INNER_PORT}
        REST_INNER_PORT: ${REST_INNER_PORT}
        VRE_LITE_INNER_PORT: ${VRE_LITE_INNER_PORT}
        MINIO_UI_INNER_PORT: ${MINIO_UI_INNER_PORT}
        MINIO_API_INNER_PORT: ${MINIO_API_INNER_PORT}
        SERVER_URL: ${MINIO_URL}
    volumes:
      - certs_volume:/usr/local/apache2/conf/ssl   # path to SSL certificates
    ports:
      - "${APACHE_HTTP_OUTER_PORT}:${APACHE_HTTP_INNER_PORT}"   # http port mapping
      - "${APACHE_HTTPS_OUTER_PORT}:${APACHE_HTTPS_INNER_PORT}"   # https port mapping
      - "${APACHE_MINIO_OUTER_PORT}:${APACHE_MINIO_INNER_PORT}"      # minio console port mapping
    networks:
      - web_network
    deploy:
      replicas: ${APACHE_REPLICAS}  # Ensure this service is not deployed by default as it is a one-time task
      resources:
        limits:
          cpus: ${APACHE_CPU_LIMIT}   # Specify the limit number of CPUs
          memory: ${APACHE_MEMORY_LIMIT}   # Specify the limit memory
        reservations:
          cpus: ${APACHE_CPU_RESERVATION}   # Specify the reserved number of CPUs
          memory: ${APACHE_MEMORY_RESERVATION}   # Specify the reserved memory
      restart_policy:
        condition: any   # Restart always

  loader:
    image: loader_image   # name of loader image
    build:
      context: ./loader   # folder to search Dockerfile for this image
      args:
        DB_SERVER: ${DB_SERVER}
        DB_PORT: ${DB_OUTER_PORT}
        DB_NAME: ${DB_NAME}
        DB_AUTH_USER: ${LOADER_DB_LOGIN}
        DB_AUTH_PASSWORD: ${LOADER_DB_PASSWORD}
        DB_AUTHSOURCE: ${DB_AUTHSOURCE}
    volumes:
      - loader_volume:/data   # path where the loader will look for files
    networks:
      - data_network
    deploy:
      replicas: ${LOADER_REPLICAS}  # Ensure this service is not deployed by default as it is a one-time task
      resources:
        limits:
          cpus: ${LOADER_CPU_LIMIT}   # Specify the limit number of CPUs
          memory: ${LOADER_MEMORY_LIMIT}   # Specify the limit memory
        reservations:
          cpus: ${LOADER_CPU_RESERVATION}   # Specify the reserved number of CPUs
          memory: ${LOADER_MEMORY_RESERVATION}   # Specify the reserved memory

  workflow:
    image: workflow_image
    build:
      context: ./workflow   # folder to search Dockerfile for this image
      args:
        MINIO_ROOT_USER: ${MINIO_ROOT_USER}
        MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
        MINIO_API_PORT: ${MINIO_API_INNER_PORT}
    volumes:
      - workflow_volume:/data  # path where the workflow will look for files
    networks:
      - minio_network
    depends_on:
      - minio
    deploy:
      replicas: ${WORKFLOW_REPLICAS}  # Ensure this service is not deployed by default as it is a one-time task
      resources:
        limits:
          cpus: ${WORKFLOW_CPU_LIMIT}   # Specify the limit number of CPUs
          memory: ${WORKFLOW_MEMORY_LIMIT}   # Specify the limit memory
        reservations:
          cpus: ${WORKFLOW_CPU_RESERVATION}   # Specify the reserved number of CPUs
          memory: ${WORKFLOW_MEMORY_RESERVATION}   # Specify the reserved memory

  client:
    image: client_image
    build:
      context: ./client  # folder to search Dockerfile for this image
      args:
        NODE_ID: ${NODE}  # Pass here the build argument with the node id
        CLIENT_INNER_PORT: ${CLIENT_INNER_PORT}
    ports:
      - "${CLIENT_OUTER_PORT}:${CLIENT_INNER_PORT}"  # port mapping
    networks:
      - web_network
    deploy:
      replicas: ${CLIENT_REPLICAS}   # Specify the number of replicas for Docker Swarm
      resources:
        limits:
          cpus: ${CLIENT_CPU_LIMIT}   # Specify the limit number of CPUs
          memory: ${CLIENT_MEMORY_LIMIT}   # Specify the limit memory
        reservations:
          cpus: ${CLIENT_CPU_RESERVATION}   # Specify the reserved number of CPUs
          memory: ${CLIENT_MEMORY_RESERVATION}   # Specify the reserved memory
      restart_policy:
        condition: any   # Restart always
      update_config:
        order: start-first  # Priority over other services

  rest:
    image: rest_image
    build:
      context: ./rest   # folder to search Dockerfile for this image
      args:
        DB_SERVER: ${DB_SERVER}
        DB_PORT: ${DB_OUTER_PORT}
        DB_NAME: ${DB_NAME}
        DB_AUTH_USER: ${REST_DB_LOGIN}
        DB_AUTH_PASSWORD: ${REST_DB_PASSWORD}
        DB_AUTHSOURCE: ${DB_AUTHSOURCE}
        REST_INNER_PORT: ${REST_INNER_PORT}
    depends_on:
      - mongodb
    ports:
      - "${REST_OUTER_PORT}:${REST_INNER_PORT}"   # port mapping
    networks:
      - data_network
      - web_network
    deploy:
      replicas: ${REST_REPLICAS}   # Specify the number of replicas for Docker Swarm
      resources:
        limits:
          cpus: ${REST_CPU_LIMIT}   # Specify the limit number of CPUs
          memory: ${REST_MEMORY_LIMIT}   # Specify the limit memory
        reservations:
          cpus: ${REST_CPU_RESERVATION}   # Specify the reserved number of CPUs
          memory: ${REST_MEMORY_RESERVATION}   # Specify the reserved memory
      restart_policy:
        condition: any   # Restart always
      update_config:
        order: start-first  # Priority over other services

  mongodb:
    image: mongo:6
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - "${DB_OUTER_PORT}:${DB_INNER_PORT}"
    volumes:
      - ${DB_VOLUME_PATH}:/data/db  # path where the database will be stored (outside the container, in the host machine)
      - ./mongodb/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init-template.js:ro # path to the template initialization script
    # before init mongo, replace the template with the actual values
    entrypoint: >
      sh -c "sed 's/\DB_NAME/'${DB_NAME}'/' /docker-entrypoint-initdb.d/mongo-init-template.js | 
      sed 's/\LOADER_DB_LOGIN/'${LOADER_DB_LOGIN}'/' | 
      sed 's/\LOADER_DB_PASSWORD/'${LOADER_DB_PASSWORD}'/' | 
      sed 's/\REST_DB_LOGIN/'${REST_DB_LOGIN}'/' | 
      sed 's/\REST_DB_PASSWORD/'${REST_DB_PASSWORD}'/' > /docker-entrypoint-initdb.d/mongo-init.js &&
      mongod --port ${DB_INNER_PORT} --bind_ip_all --auth"
    networks:
      - data_network
    deploy:
      replicas: ${DB_REPLICAS}   # Specify the number of replicas for Docker Swarm
      resources:
        limits:
          cpus: ${DB_CPU_LIMIT}    # Specify the limit number of CPUs
          memory: ${DB_MEMORY_LIMIT}   # Specify the limit memory
        reservations:
          cpus: ${DB_CPU_RESERVATION}   # Specify the reserved number of CPUs
          memory: ${DB_MEMORY_RESERVATION}   # Specify the reserved memory
      restart_policy:
        condition: on-failure   # Restart only on failure

  minio:
    image: minio/minio
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_BROWSER_REDIRECT_URL=${MINIO_BROWSER_REDIRECT_URL}  # Set the base URL for the Minio console
    volumes:
      # paths where minio will store the data in object storage format (outside the container, in the host machine)
      - minio_volume1:/mnt/disk1   
      - minio_volume2:/mnt/disk2
      - minio_volume3:/mnt/disk3
      - minio_volume4:/mnt/disk4
    ports:
      - "${MINIO_API_OUTER_PORT}:${MINIO_API_INNER_PORT}"
      - "${MINIO_UI_INNER_PORT}:${MINIO_UI_INNER_PORT}"   # port for the minio webUI (only for development)
    networks:
      - minio_network
      - web_network
    deploy:
      replicas: ${MINIO_REPLICAS}   # Specify the number of replicas for Docker Swarm
      placement:
        max_replicas_per_node: ${MINIO_REPLICAS}   # Specify the maximum number of replicas per node
      resources:
        limits:
          cpus: ${MINIO_CPU_LIMIT}    # Specify the limit number of CPUs
          memory: ${MINIO_MEMORY_LIMIT}   # Specify the limit memory
        reservations:
          cpus: ${MINIO_CPU_RESERVATION}   # Specify the reserved number of CPUs
          memory: ${MINIO_MEMORY_RESERVATION}   # Specify the reserved memory
      restart_policy:
        condition: on-failure   # Restart only on failure
    hostname: minio
    command: server --address ":${MINIO_API_INNER_PORT}" --console-address ":${MINIO_UI_INNER_PORT}" http://minio/mnt/disk{1...4}    # Remove the console-address flag for production
    # command: server --address ":${MINIO_API_INNER_PORT}" --console-address ":${MINIO_UI_INNER_PORT}" http://minio{1...3}/mnt/disk{1...4}    # For multiple nodes (ie 3 nodes)
    healthcheck:  # Health check for the minio service
      test: ["CMD", "curl", "-f", "http://localhost:${MINIO_API_INNER_PORT}/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5

  vre_lite:
    image: vre_lite_image 
    build:
      context: ./vre_lite
      args:
        MINIO_ROOT_USER: ${MINIO_ROOT_USER}
        MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
        MINIO_API_PORT: ${MINIO_API_INNER_PORT}
        VRE_LITE_INNER_PORT: ${VRE_LITE_INNER_PORT}
        VRE_LITE_BASE_URL_DEVELOPMENT: ${VRE_LITE_BASE_URL_DEVELOPMENT}
        VRE_LITE_BASE_URL_STAGING: ${VRE_LITE_BASE_URL_STAGING}
        VRE_LITE_BASE_URL_PRODUCTION: ${VRE_LITE_BASE_URL_PRODUCTION}
        VRE_LITE_LOG_PATH: ${VRE_LITE_LOG_PATH}
        VRE_LITE_MAX_FILE_SIZE: ${VRE_LITE_MAX_FILE_SIZE}
        VRE_LITE_TIME_DIFF: ${CRONJOB_VRE_LITE_TIME_DIFF}
        MINIO_PROTOCOL: ${MINIO_PROTOCOL}
        MINIO_URL: ${MINIO_URL}
        MINIO_PORT: ${APACHE_MINIO_OUTER_PORT}
        NODE_NAME: ${NODE}
    volumes:
      - vre_lite_log_volume:/vre_lite
    ports:
      - "${VRE_LITE_OUTER_PORT}:${VRE_LITE_INNER_PORT}"
    networks:
      - minio_network
      - web_network
    depends_on:
      - minio
    deploy:
      replicas: ${VRE_LITE_REPLICAS}   # Specify the number of replicas for Docker Swarm
      resources:
        limits:
          cpus: ${VRE_LITE_CPU_LIMIT}   # Specify the limit number of CPUs
          memory: ${VRE_LITE_MEMORY_LIMIT}   # Specify the limit memory
        reservations:
          cpus: ${VRE_LITE_CPU_RESERVATION}   # Specify the reserved number of CPUs
          memory: ${VRE_LITE_MEMORY_RESERVATION}   # Specify the reserved memory
      restart_policy:
        condition: any   # Restart always
      update_config:
        order: start-first  # Priority over other services

  cronjobs:
    image: cronjobs_image 
    build:
      context: ./cronjobs
      args:
        VRE_LITE_LOG_PATH: ${VRE_LITE_LOG_PATH}
        VRE_LITE_TIME_DIFF: ${CRONJOB_VRE_LITE_TIME_DIFF}
        CJ_VRE_LITE_LOG_PATH: ${CJ_VRE_LITE_LOG_PATH}
        MINIO_ROOT_USER: ${MINIO_ROOT_USER}
        MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
        MINIO_PORT: ${MINIO_API_INNER_PORT}
    volumes:
      - vre_lite_log_volume:/vre_lite
    networks:
      - minio_network
    depends_on:
      - minio
    deploy:
      replicas: ${CRONJOBS_REPLICAS}   # Specify the number of replicas for Docker Swarm
      resources:
        limits:
          cpus: ${CRONJOBS_CPU_LIMIT}   # Specify the limit number of CPUs
          memory: ${CRONJOBS_MEMORY_LIMIT}   # Specify the limit memory
        reservations:
          cpus: ${CRONJOBS_CPU_RESERVATION}   # Specify the reserved number of CPUs
          memory: ${CRONJOBS_MEMORY_RESERVATION}   # Specify the reserved memory
      restart_policy:
        condition: on-failure   # Restart only on failure


volumes:
  certs_volume:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${APACHE_CERTS_VOLUME_PATH}   # bind the volume to APACHE_CERTS_VOLUME_PATH on the host
  loader_volume:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOADER_VOLUME_PATH}   # bind the volume to LOADER_VOLUME_PATH on the host
  workflow_volume:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${WORKFLOW_VOLUME_PATH}   # bind the volume to WORKFLOW_VOLUME_PATH on the host
  minio_volume1:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MINIO_VOLUME_PATH1}   # bind the volume to MINIO_VOLUME_PATH1 on the host
  minio_volume2:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MINIO_VOLUME_PATH2}   # bind the volume to MINIO_VOLUME_PATH2 on the host
  minio_volume3:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MINIO_VOLUME_PATH3}   # bind the volume to MINIO_VOLUME_PATH3 on the host
  minio_volume4:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MINIO_VOLUME_PATH4}   # bind the volume to MINIO_VOLUME_PATH4 on the host
  vre_lite_log_volume:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${VRE_LITE_VOLUME_PATH}   # bind the volume to VRE_LITE_LOG_PATH on the host

networks:
  data_network: 
    external: true   # Use an external network
  minio_network: 
    #name: minio_network 
    #driver: overlay   # Use an overlay network
    external: true   # Use an external network
  web_network:
    name: web_network
    driver: overlay   # Use an overlay network